# ---- Model Specification ----
lm_model <- linear_reg() %>%
set_engine("lm")
# ---- Workflow ----
covid_workflow <- workflow() %>%
add_model(lm_model) %>%
add_recipe(covid_recipe)
# ---- Fit Model ----
lm_fit <- covid_workflow %>%
fit(data = train_data)
# ---- Predict and Evaluate ----
predictions <- predict(lm_fit, new_data = test_data) %>%
bind_cols(test_data %>% select(deaths))
# Print metrics
predictions %>%
metrics(truth = deaths, estimate = .pred)
# ---- Plot Actual vs Predicted ----
ggplot(predictions, aes(x = deaths, y = .pred)) +
geom_point(color = "steelblue", size = 3) +
geom_abline(linetype = "dashed", color = "red") +
labs(
title = "Predicted vs Truths COVID-19 Deaths by State",
x = "Actual Deaths",
y = "Predicted Deaths"
) +
theme_minimal()
# Load libraries
library(tidyverse)
library(tidymodels)
# URLs for data
covid_url <- 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv'
pop_url   <- 'https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/counties/totals/co-est2023-alldata.csv'
# Load datasets
covid_data <- readr::read_csv(covid_url)
census_data <- readr::read_csv(pop_url)
# ---- Data Cleaning ----
# Keep most recent COVID data per state
covid_latest <- covid_data %>%
group_by(state) %>%
filter(date == max(date)) %>%
ungroup() %>%
select(state, cases, deaths)
# Clean and aggregate census data to state level
census_clean <- census_data %>%
select(STNAME, POPESTIMATE2023) %>%
group_by(STNAME) %>%
summarise(population = sum(POPESTIMATE2023)) %>%
rename(state = STNAME)
# Join COVID and population data
covid_joined <- covid_latest %>%
inner_join(census_clean, by = "state") %>%
mutate(
cases_per_100k = cases / population * 100000,
deaths_per_100k = deaths / population * 100000
)
# ---- Feature Engineering ----
covid_model_data <- covid_joined %>%
select(deaths, cases_per_100k, population) %>%
mutate(
log_population = log(population)
)
# ---- Data Splitting ----
set.seed(123)
data_split <- initial_split(covid_model_data, prop = 0.8)
train_data <- training(data_split)
test_data  <- testing(data_split)
# ---- Recipe ----
covid_recipe <- recipe(deaths ~ ., data = train_data) %>%
step_normalize(all_predictors())
# ---- Model Specification ----
lm_model <- linear_reg() %>%
set_engine("lm")
# ---- Workflow ----
covid_workflow <- workflow() %>%
add_model(lm_model) %>%
add_recipe(covid_recipe)
# ---- Fit Model ----
lm_fit <- covid_workflow %>%
fit(data = train_data)
# ---- Predict and Evaluate ----
predictions <- predict(lm_fit, new_data = test_data) %>%
bind_cols(test_data %>% select(deaths))
# Print metrics
predictions %>%
metrics(truth = deaths, estimate = .pred)
# ---- Plot Actual vs Predicted ----
ggplot(predictions, aes(x = deaths, y = .pred)) +
geom_point(color = "steelblue", size = 3) +
geom_abline(linetype = "dashed", color = "red") +
labs(
title = "Predicted vs Truth COVID-19 Deaths by State",
x = "Actual Deaths",
y = "Predicted Deaths"
) +
theme_minimal()
library(tidyverse)
library(lubridate)
# Load the data
slr_data <- read_csv("8723214_SLR_VirginiaKey.csv")
# Load the data
slr_data <- read_csv("8723214_SLR_VirginiaKey.csv")
# Check the structure of the data
glimpse(slr_data)
# Assuming there's a date and sea level column; adjust names if needed
# Let's parse and filter dates
slr_filtered <- slr_data %>%
mutate(date = as.Date(date)) %>%
filter(date >= as.Date("2010-01-01") & date <= as.Date("2024-12-31"))
# Load the data
slr_data <- read_csv("8723214_SLR_VirginiaKey.csv")
# Check the structure of the data
glimpse(slr_data)
names(slr_data)
head(slr_data)
# Sea Level Rise in Virginia Key
library(tidyverse)
library(lubridate)
slr_data <- read_csv("8723214_SLR_VirginiaKey.csv", skip = 4, col_names = c("Year", "Month", "Monthly_MSL", "Linear_Trend", "High_Conf", "Low_Conf"))
slr_data <- slr_data %>% filter(!is.na(Year))
slr_data <- slr_data %>%
mutate(date = make_date(Year, Month, 1)) %>%
filter(date >= as.Date("2010-01-01") & date <= as.Date("2024-12-31"))
ggplot(slr_data, aes(x = date, y = Monthly_MSL)) +
geom_line(color = "#1F77B4") +
labs(
title = "Monthly Mean Sea Level (2010–2024) at Virginia Key",
x = "Date",
y = "Monthly Mean Sea Level (meters)"
) +
theme_minimal()
# Sea Level Rise in Virginia Key
library(tidyverse)
library(lubridate)
slr_data <- read_csv("8723214_SLR_VirginiaKey.csv", skip = 4, col_names = c("Year", "Month", "Monthly_MSL", "Linear_Trend", "High_Conf", "Low_Conf"))
slr_data <- slr_data %>% filter(!is.na(Year))
slr_data <- slr_data %>%
mutate(date = make_date(Year, Month, 1)) %>%
filter(date >= as.Date("2010-01-01") & date <= as.Date("2024-12-31"))
ggplot(slr_data, aes(x = date, y = Monthly_MSL)) +
geom_line(color = "#1F77B4", alpha = 0.5) +  # actual sea level line (faded)
geom_smooth(method = "lm", color = "#D62728", se = FALSE, size = 1.2) +  # trend line
labs(
title = "Sea Level Trend at Virginia Key (2010–2024)",
x = "Date",
y = "Monthly Mean Sea Level (meters)"
) +
theme_minimal()
# Sea Level Rise in Virginia Key
library(tidyverse)
library(lubridate)
slr_data <- read_csv("8723214_SLR_VirginiaKey.csv", skip = 4, col_names = c("Year", "Month", "Monthly_MSL", "Linear_Trend", "High_Conf", "Low_Conf"))
slr_data <- slr_data %>% filter(!is.na(Year))
slr_data <- slr_data %>%
mutate(date = make_date(Year, Month, 1)) %>%
filter(date >= as.Date("2010-01-01") & date <= as.Date("2024-12-31"))
ggplot(slr_data, aes(x = date, y = Monthly_MSL)) +
geom_line(color = "#1F77B4", alpha = 0.5) +  # actual sea level line (faded)
geom_smooth(method = "lm", color = "#D62728", se = FALSE, size = 1.2) +  # trend line
labs(
title = "Sea Level Trend at Virginia Key (2010–2024)",
x = "Date",
y = "Monthly Mean Sea Level (meters)"
) +
theme_minimal()
theme(
axis.text.y = element_text(size = 8)  # or any size you prefer
)
# Sea Level Rise in Virginia Key
library(tidyverse)
library(lubridate)
slr_data <- read_csv("8723214_SLR_VirginiaKey.csv", skip = 4, col_names = c("Year", "Month", "Monthly_MSL", "Linear_Trend", "High_Conf", "Low_Conf"))
slr_data <- slr_data %>% filter(!is.na(Year))
slr_data <- slr_data %>%
mutate(date = make_date(Year, Month, 1)) %>%
filter(date >= as.Date("2010-01-01") & date <= as.Date("2024-12-31"))
ggplot(slr_data, aes(x = date, y = Monthly_MSL)) +
geom_line(color = "#1F77B4", alpha = 0.5) +  # actual sea level line (faded)
geom_smooth(method = "lm", color = "#D62728", se = FALSE, size = 1.2) +  # trend line
labs(
title = "Sea Level Trend at Virginia Key (2010–2024)",
x = "Date",
y = "Monthly Mean Sea Level (meters)"
) +
theme_minimal()
theme(
axis.text.y = element_text(size = 4)  # or any size you prefer
)
# Sea Level Rise in Virginia Key
library(tidyverse)
library(lubridate)
slr_data <- read_csv("8723214_SLR_VirginiaKey.csv", skip = 4, col_names = c("Year", "Month", "Monthly_MSL", "Linear_Trend", "High_Conf", "Low_Conf"))
slr_data <- slr_data %>% filter(!is.na(Year))
slr_data <- slr_data %>%
mutate(date = make_date(Year, Month, 1)) %>%
filter(date >= as.Date("2010-01-01") & date <= as.Date("2024-12-31"))
ggplot(slr_data, aes(x = date, y = Monthly_MSL)) +
geom_line(color = "#1F77B4", alpha = 0.5) +  # actual sea level line (faded)
geom_smooth(method = "lm", color = "#D62728", se = FALSE, size = 1.2) +  # trend line
labs(
title = "Sea Level Trend at Virginia Key (2010–2024)",
x = "Date",
y = "Monthly Mean Sea Level (meters)"
) +
theme_minimal()
theme(
axis.text.y = element_text(size = 2)  # or any size you prefer
)
# Sea Level Rise in Virginia Key
library(tidyverse)
library(lubridate)
slr_data <- read_csv("8723214_SLR_VirginiaKey.csv", skip = 4, col_names = c("Year", "Month", "Monthly_MSL", "Linear_Trend", "High_Conf", "Low_Conf"))
slr_data <- slr_data %>% filter(!is.na(Year))
slr_data <- slr_data %>%
mutate(date = make_date(Year, Month, 1)) %>%
filter(date >= as.Date("2010-01-01") & date <= as.Date("2024-12-31"))
ggplot(slr_data, aes(x = date, y = Monthly_MSL)) +
geom_line(color = "#1F77B4", alpha = 0.5) +
geom_smooth(method = "lm", color = "#D62728", se = FALSE, size = 1.2) +
scale_y_continuous(
limits = c(0, 0.30),
breaks = seq(0, 0.30, by = 0.05),
labels = scales::number_format(accuracy = 0.01)
) +
labs(
title = "Sea Level Trend at Virginia Key (2010–2024)",
x = "Date",
y = "Monthly Mean Sea Level (meters)"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 8)
)
# Sea Level Rise in Virginia Key
library(tidyverse)
library(lubridate)
slr_data <- read_csv("8723214_SLR_VirginiaKey.csv", skip = 4,
col_names = c("Year", "Month", "Monthly_MSL", "Linear_Trend", "High_Conf", "Low_Conf"))
slr_data <- slr_data %>%
filter(!is.na(Year)) %>%
mutate(
Monthly_MSL = as.numeric(Monthly_MSL),  # convert to numeric!
date = make_date(Year, Month, 1)
) %>%
filter(date >= as.Date("2010-01-01") & date <= as.Date("2024-12-31"))
ggplot(slr_data, aes(x = date, y = Monthly_MSL)) +
geom_line(color = "#1F77B4", alpha = 0.5) +
geom_smooth(method = "lm", color = "#D62728", se = FALSE, size = 1.2) +
scale_y_continuous(
limits = c(0, 0.30),
breaks = seq(0, 0.30, by = 0.05),
labels = scales::number_format(accuracy = 0.01)
) +
labs(
title = "Sea Level Trend at Virginia Key (2010–2024)",
x = "Date",
y = "Monthly Mean Sea Level (meters)"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 8)
)
# Load necessary libraries
library(tidyverse)
library(lubridate)
# Read the CSV file
salinity_data <- read_csv("salinity.csv")
# Convert and filter date
salinity_data <- salinity_data %>%
mutate(Activity_StartDate = as.Date(Activity_StartDate)) %>%
filter(Activity_StartDate >= as.Date("2010-01-01") & Activity_StartDate <= as.Date("2024-12-31"))
# Plot salinity over time
ggplot(salinity_data, aes(x = Activity_StartDate, y = Result_Measure)) +
geom_line(color = "steelblue", size = 1) +
labs(title = "Salinity (ppth) from 2010 to 2024",
x = "Date",
y = "Salinity (ppth)") +
theme_minimal()
# Load necessary libraries
library(tidyverse)
library(lubridate)
# Read the CSV file
salinity_data <- read_csv("salinity.csv")
# Convert and filter date
salinity_data <- salinity_data %>%
mutate(Activity_StartDate = as.Date(Activity_StartDate)) %>%
filter(Activity_StartDate >= as.Date("2010-01-01") & Activity_StartDate <= as.Date("2024-12-31"))
# Plot salinity over time
ggplot(salinity_data, aes(x = Activity_StartDate, y = Result_Measure)) +
geom_line(color = "steelblue", size = 0.5) +
labs(title = "Salinity (ppth) from 2010 to 2024",
x = "Date",
y = "Salinity (ppth)") +
theme_minimal()
# Load necessary libraries
library(tidyverse)
library(lubridate)
# Read the CSV file
salinity_data <- read_csv("salinity.csv")
# Convert and filter
salinity_data <- salinity_data %>%
mutate(Activity_StartDate = as.Date(Activity_StartDate)) %>%
filter(Activity_StartDate >= as.Date("2010-01-01") & Activity_StartDate <= as.Date("2024-12-31"),
Location_CountyName == "Miami-Dade County")
# Plot salinity over time for Miami-Dade County
ggplot(salinity_data, aes(x = Activity_StartDate, y = Result_Measure)) +
geom_line(color = "steelblue", size = 0.5) +
labs(title = "Salinity in Miami-Dade County (ppth, 2010–2024)",
x = "Date",
y = "Salinity (ppth)") +
theme_minimal()
# Load necessary libraries
library(tidyverse)
library(lubridate)
# Read the CSV file
salinity_data <- read_csv("salinity.csv")
# Convert and filter
salinity_data <- salinity_data %>%
mutate(Activity_StartDate = as.Date(Activity_StartDate)) %>%
filter(Activity_StartDate >= as.Date("2010-01-01") & Activity_StartDate <= as.Date("2024-12-31"),
Location_CountyName == "Miami-Dade County")
# Plot salinity over time for Miami-Dade County
ggplot(salinity_data, aes(x = Activity_StartDate, y = Result_Measure)) +
geom_line(color = "steelblue", size = 0.5) +
labs(title = "Salinity in Miami-Dade County (ppth, 2010–2024)",
x = "Date",
y = "Salinity (ppth)") +
theme_minimal()
library(dataRetrieval)
install.packages"dataRetrival"
install.packages "dataRetrieval"
install.packages("dataRetrieval")
library(dataRetrieval)
# Example: Cache la Poudre River at Mouth (USGS site 06752260)
poudre_flow <- readNWISdv(siteNumber = "06752260",    # Download data from USGS for site 06752260
parameterCd = "00060",      # Parameter code 00060 = discharge in cfs)
startDate = "2013-01-01",   # Set the start date
endDate = "2023-12-31") |>  # Set the end date
renameNWISColumns() |>                              # Rename columns to standard names (e.g., "Flow", "Date")
mutate(Date = yearmonth(Date)) |>                   # Convert daily Date values into a year-month format (e.g., "2023 Jan")
group_by(Date) |>                                   # Group the data by the new monthly Date
summarise(Flow = mean(Flow))                       # Calculate the average daily flow for each month
library(dplyr)
library(dataRetrieval)
# Example: Cache la Poudre River at Mouth (USGS site 06752260)
poudre_flow <- readNWISdv(siteNumber = "06752260",    # Download data from USGS for site 06752260
parameterCd = "00060",      # Parameter code 00060 = discharge in cfs)
startDate = "2013-01-01",   # Set the start date
endDate = "2023-12-31") |>  # Set the end date
renameNWISColumns() |>                              # Rename columns to standard names (e.g., "Flow", "Date")
mutate(Date = yearmonth(Date)) |>                   # Convert daily Date values into a year-month format (e.g., "2023 Jan")
group_by(Date) |>                                   # Group the data by the new monthly Date
summarise(Flow = mean(Flow))                       # Calculate the average daily flow for each month
library(dplyr)
library(dataRetrieval)
library(tsibble)
install.packages("tsibble")
library(dplyr)
library(dataRetrieval)
library(tsibble)
# Example: Cache la Poudre River at Mouth (USGS site 06752260)
poudre_flow <- readNWISdv(siteNumber = "06752260",    # Download data from USGS for site 06752260
parameterCd = "00060",      # Parameter code 00060 = discharge in cfs)
startDate = "2013-01-01",   # Set the start date
endDate = "2023-12-31") |>  # Set the end date
renameNWISColumns() |>                              # Rename columns to standard names (e.g., "Flow", "Date")
mutate(Date = yearmonth(Date)) |>                   # Convert daily Date values into a year-month format (e.g., "2023 Jan")
group_by(Date) |>                                   # Group the data by the new monthly Date
summarise(Flow = mean(Flow))                       # Calculate the average daily flow for each month
library(tsibble)
# Convert the data frame to a tsibble
poudre_flow_tsibble <- poudre_flow %>%
as_tsibble(index = Date)
library(ggplot2)
# Static plot
ggplot(poudre_flow_tsibble, aes(x = Date, y = Flow)) +
geom_line() +
labs(title = "Monthly Average Flow: Cache la Poudre River",
x = "Date", y = "Flow (cfs)") +
theme_minimal()
library(plotly)
install.packages("plotly")
library(ggplot2)
# Static plot
ggplot(poudre_flow_tsibble, aes(x = Date, y = Flow)) +
geom_line() +
labs(title = "Monthly Average Flow: Cache la Poudre River",
x = "Date", y = "Flow (cfs)") +
theme_minimal()
library(plotly)
# Animated plot
p <- ggplot(poudre_flow_tsibble, aes(x = Date, y = Flow)) +
geom_line() +
labs(title = "Monthly Average Flow: Cache la Poudre River",
x = "Date", y = "Flow (cfs)") +
theme_minimal()
ggplotly(p)  # This creates an interactive, animated plot in plotly
library(feasts)
install.packages("feasts")
library(feasts)
# Subseries plot
poudre_flow_tsibble %>%
gg_subseries(Flow) +
labs(title = "Subseries Plot: Cache la Poudre River Flow")
library(dplyr)
library(dataRetrieval)
library(tsibble)
# Example: Cache la Poudre River at Mouth (USGS site 06752260)
poudre_flow <- readNWISdv(siteNumber = "06752260",    # Download data from USGS for site 06752260
parameterCd = "00060",      # Parameter code 00060 = discharge in cfs)
startDate = "2013-01-01",   # Set the start date
endDate = "2023-12-31") |>  # Set the end date
renameNWISColumns() |>                              # Rename columns to standard names (e.g., "Flow", "Date")
mutate(Date = yearmonth(Date)) |>                   # Convert daily Date values into a year-month format (e.g., "2023 Jan")
group_by(Date) |>                                   # Group the data by the new monthly Date
summarise(Flow = mean(Flow))                       # Calculate the average daily flow for each month
library(tsibble)
# Convert the data frame to a tsibble
poudre_flow_tsibble <- poudre_flow %>%
as_tsibble(index = Date)
library(ggplot2)
# Static plot
ggplot(poudre_flow_tsibble, aes(x = Date, y = Flow)) +
geom_line() +
labs(title = "Monthly Average Flow: Cache la Poudre River",
x = "Date", y = "Flow (cfs)") +
theme_minimal()
library(plotly)
# Animated plot
p <- ggplot(poudre_flow_tsibble, aes(x = Date, y = Flow)) +
geom_line() +
labs(title = "Monthly Average Flow: Cache la Poudre River",
x = "Date", y = "Flow (cfs)") +
theme_minimal()
ggplotly(p)  # This creates an interactive, animated plot in plotly
library(feasts)
# Subseries plot
poudre_flow_tsibble %>%
gg_subseries(Flow) +
labs(title = "Subseries Plot: Cache la Poudre River Flow")
library(feasts)
# Subseries plot
poudre_flow_tsibble %>%
gg_subseries(Flow) +
labs(title = "Subseries Plot: Cache la Poudre River Flow") +
theme_minimal() +
theme(axis.text.x = element_text(size = 12))
library(feasts)
# Subseries plot
poudre_flow_tsibble %>%
gg_subseries(Flow) +
labs(title = "Subseries Plot: Cache la Poudre River Flow") +
theme_minimal() +
theme(axis.text.x = element_text(size = 8))
library(feasts)
# Subseries plot
poudre_flow_tsibble %>%
gg_subseries(Flow) +
labs(title = "Subseries Plot: Cache la Poudre River Flow") +
theme_minimal() +
theme(axis.text.x = element_text(size = 4))
library(feasts)
# Subseries plot
poudre_flow_tsibble %>%
gg_subseries(Flow) +
labs(title = "Subseries Plot: Cache la Poudre River Flow") +
theme_minimal() +
theme(axis.text.x = element_text(size = 2))
library(feasts)
# Subseries plot
poudre_flow_tsibble %>%
gg_subseries(Flow) +
labs(title = "Subseries Plot: Cache la Poudre River Flow") +
theme_minimal() +
theme(axis.text.x = element_text(size = 3))
library(feasts)
# Subseries plot
poudre_flow_tsibble %>%
gg_subseries(Flow) +
labs(title = "Subseries Plot: Cache la Poudre River Flow") +
theme_minimal() +
theme(axis.text.x = element_text(size = 2))
library(fable)
install.packages("fable")
library(fable)
library(feasts)
library(fabletools)
library(fable)
library(feasts)
library(fabletools)
# STL decomposition with a chosen seasonal window
poudre_decomp <- poudre_flow_tsibble %>%
model(
stl = STL(Flow ~ season(window = "periodic"))
)
# Plot the decomposed components
components(poudre_decomp) %>%
autoplot() +
labs(title = "STL Decomposition of Streamflow Data")
library(fable)
library(feasts)
library(fabletools)
# STL decomposition with a chosen seasonal window
poudre_decomp <- poudre_flow_tsibble %>%
model(
stl = STL(Flow ~ season(window = "periodic"))
)
# Plot the decomposed components
components(poudre_decomp) %>%
autoplot() +
labs(title = "STL Decomposition of Streamflow Data") +
theme_minimal() +
theme(axis.text.y = element_text(size = 12))
